---
import NavBar from "@/components/navigation/NavBar.vue";
import Footer from "@/components/sections/Footer.astro";
import "@/styles/global.css";
import { useTranslations } from "@/i18n/utils";

interface Props {
  title: string;
  description?: string;
  lang?: string;
  keywords?: string;
  ogImage?: string;
  twitterImage?: string;
}

const {
  title,
  description,
  lang = "en",
  keywords,
  ogImage,
  twitterImage,
} = Astro.props;

const t = useTranslations(lang);
const defaultOgImageUrl = "https://marctonimas.com/og-image.jpg";
const site = Astro.site
  ? Astro.site.toString().replace(/\/$/, "")
  : "https://marctonimas.com";

const currentPathname = Astro.url.pathname;
let basePath;

if (lang === "es") {
  basePath = currentPathname.startsWith("/es")
    ? currentPathname.substring(3)
    : currentPathname;
} else {
  // lang === "en"
  basePath = currentPathname;
}

// Normalize basePath
if (basePath === "" || basePath === "/") {
  basePath = "/";
} else if (!basePath.startsWith("/")) {
  basePath = "/" + basePath;
}
// Ensure basePath does not end with a slash if it's not the root
if (basePath !== "/" && basePath.endsWith("/")) {
  basePath = basePath.slice(0, -1);
}

const hreflangLinks = [];
const enUrl = site + (basePath === "/" ? "" : basePath); // For root, site already has no trailing slash. For others, basePath has leading slash.
hreflangLinks.push({ lang: "en", href: enUrl === site + "/" ? site : enUrl }); // Ensure no double slash for root

const esUrl = site + "/es" + (basePath === "/" ? "" : basePath);
hreflangLinks.push({
  lang: "es",
  href: esUrl === site + "/es/" ? site + "/es" : esUrl,
}); // Ensure no double slash for root

hreflangLinks.push({
  lang: "x-default",
  href: enUrl === site + "/" ? site : enUrl,
});

const webSiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: title,
  url: site, // Use 'site' instead of 'siteUrl'
  description: description,
};

const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: t("person.name"),
  url: t("person.url"), // This should be the person's specific URL, potentially different from site. For now, uses translated value.
  jobTitle: t("person.jobTitle"),
  sameAs: [t("person.sameAs.linkedin"), t("person.sameAs.github")].filter(
    (url) => url && !url.startsWith("person.sameAs."),
  ), // Filter out if key not found
};
---

<!doctype html>
<html lang={lang} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <link rel="canonical" href={Astro.url.href} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <!-- <meta name="generator" content={Astro.generator} /> -->
    <meta name="description" content={description} />
    {keywords && <meta name="keywords" content={keywords} />}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@mtmarctoni" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={twitterImage || defaultOgImageUrl} />
    <meta name="twitter:creator" content="@mtmarctoni" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage || defaultOgImageUrl} />
    <meta property="og:url" content="https://marctonimas.com" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Marc Antoni Mas" />

    {
      hreflangLinks.map((link) => (
        <link rel="alternate" hreflang={link.lang} href={link.href} />
      ))
    }

    <script
      type="application/ld+json"
      set:html={JSON.stringify(webSiteSchema)}
    />
    <script
      type="application/ld+json"
      set:html={JSON.stringify(personSchema)}
    />

    <script is:inline>
      // Initialize theme based on user preference or system setting
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const theme = getThemePreference();

      document.documentElement.classList.toggle("dark", theme === "dark");

      if (typeof localStorage !== "undefined") {
        localStorage.setItem("theme", theme);
      }
    </script>
  </head>
  <body class="bg-bg text-fg transition-colors duration-300">
    <NavBar client:load client:only="header" />
    <main class="min-w-screen">
      <slot />
    </main>
    <Footer />
  </body>
</html>
