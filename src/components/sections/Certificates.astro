---
import SectionContainer from "@/components/containers/SectionContainer.astro";
import IssuerCard from "@/components/containers/IssuerCard.vue";
import { certifications as rawCertifications } from "@/i18n/certifications";
import { getLangFromUrl } from "@/i18n/utils";

const url = new URL(Astro.url);
const lang = getLangFromUrl(url) as "en" | "es";

interface Certificate {
  id: number;
  name: string;
  link: string;
  description?: string;
  institution: string;
  institutionLink: string;
  date: string;
  img: string;
  imgD: string;
  status?: 'completed' | 'in-progress';
}

interface Certifications {
  title: string;
  subtitle: string;
  button: string;
  inProgress: string;
  certificationList: Certificate[];
}

const certifications = rawCertifications[lang] as unknown as Certifications;
const { title, button, inProgress, certificationList } = certifications;

// Group certificates by institution
interface Issuer {
  name: string;
  link: string;
  img: string;
  imgD: string;
  certificates: Certificate[];
}

const groupByIssuer = (certs: Certificate[]): Issuer[] => {
  const issuerMap = new Map<string, Issuer>();
  
  certs.forEach(cert => {
    const key = `${cert.institution}-${cert.institutionLink}`;
    if (!issuerMap.has(key)) {
      issuerMap.set(key, {
        name: cert.institution,
        link: cert.institutionLink,
        img: cert.img,
        imgD: cert.imgD,
        certificates: []
      });
    }
    issuerMap.get(key)?.certificates.push(cert);
  });

  // Sort certificates within each issuer by date (newest first)
  return Array.from(issuerMap.values()).map(issuer => ({
    ...issuer,
    certificates: [...issuer.certificates].sort((a, b) => a.id - b.id
    // {
    //   const dateA = new Date(a.date);
    //   const dateB = new Date(b.date);
    //   return dateB.getTime() - dateA.getTime();
    // }
  )
  }));
};

const groupedCertificates = groupByIssuer(certificationList);
---

<SectionContainer sectionId="certifications">
  <div class="relative">
    <!-- Decorative element -->
    <div
      class="absolute -top-20 left-1/2 w-[500px] h-[500px] bg-gradient-to-r from-primary/20 to-secondary/20 rounded-full blur-3xl -translate-x-1/2"
    >
    </div>

    <h2 class="text-4xl font-bold text-center mb-12">
      <span
        class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent"
      >
        {title}
      </span>
    </h2>

    <div class="grid grid-cols-1 gap-6">
      {groupedCertificates.map((issuer) => (
        <div class="space-y-6">
          <IssuerCard
            class:list={"dark:hidden"}
            issuer={issuer.name}
            issuerLink={issuer.link}
            icon={issuer.img}
            certificates={issuer.certificates}
            button={button}
            inProgress={inProgress}
            client:load
          />
          <IssuerCard
            class:list={"hidden dark:block"}
            issuer={issuer.name}
            issuerLink={issuer.link}
            icon={issuer.imgD}
            certificates={issuer.certificates}
            button={button}
            inProgress={inProgress}
            client:load
          />
        </div>
      ))}
    </div>
  </div>
</SectionContainer>
