---
import SectionContainer from "@/components/containers/SectionContainer.astro";
import { useTranslations, getLangFromUrl } from "@/i18n/utils";
import {
  BlockchainIcon,
  CodeIcon,
  ToolsIcon,
  FrameIcon,
  DatabaseIcon,
} from "@/utils/icons";
import {
  JavaScriptIcon,
  ReactIcon,
  CssIcon,
  HtmlIcon,
  ExcelIcon,
  ExpressIcon,
  GitIcon,
  HardhatIcon,
  MongodbIcon,
  NodeIcon,
  PythonIcon,
  PowerAppsIcon,
  PowerAutomateIcon,
  SolidityIcon,
  VbaIcon,
  SqlIcon,
  PowerBiIcon,
  TailwindIcon,
  TypescriptIcon,
  VsCodeIcon,
  VueIcon,
  AstroIcon,
  EthersjsIcon,
  MetamaskIcon,
  NextjsIcon,
  EthereumIcon,
  DockerIcon,
} from "@/utils/skillIcons";
import { skillsInfo } from "@/composables/useSkills";

import SkillCard from "@/components/containers/SkillCard.astro";
import BackgroundBlobs from "@/components/ui/BackgroundBlobs.astro";

const url = new URL(Astro.url);
const lang = getLangFromUrl(url);
const t = useTranslations(lang);

interface Skill {
  name: string;
  level: number;
  icon?: any;
  category: string;
}

const skills: Skill[] = skillsInfo;

// Define categories for the filter
const categories = [
  { id: "all", label: t("skills.all"), icon: null },
  { id: "languages", label: t("skills.languages_title"), icon: CodeIcon },
  {
    id: "blockchain",
    label: t("skills.blockchain_title"),
    icon: BlockchainIcon,
  },
  { id: "frontend", label: t("skills.frontend_title"), icon: FrameIcon },
  { id: "backend", label: t("skills.backend_title"), icon: DatabaseIcon },
  { id: "tools", label: t("skills.tools_title"), icon: ToolsIcon },
];

// Group skills by proficiency
const XP_ADVANCED = 90;
const XP_INTERMEDIATE = 75;
const expertSkills = skills.filter((skill) => skill.level >= XP_ADVANCED);
const advancedSkills = skills.filter(
  (skill) => skill.level >= XP_INTERMEDIATE && skill.level < XP_ADVANCED,
);
const intermediateSkills = skills.filter(
  (skill) => skill.level < XP_INTERMEDIATE,
);
---

<SectionContainer sectionId="skills">
  <div class="relative">
    <BackgroundBlobs
      classBlob1="top-20 w-80 h-80"
      classBlob2="w-100 h-100 bottom-50"
    />
    <h2 class="text-3xl font-bold mb-8 text-center">
      <span
        class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent"
      >
        {t("skills.title")}
      </span>
    </h2>

    <!-- Interactive Skill Showcase -->
    <div class="mb-16">
      <!-- Category Filter Tabs -->
      <div class="flex flex-wrap justify-center gap-2 mb-8" id="skill-tabs">
        {
          categories.map((category, index) => (
            <button
              class="skill-tab data-[active=true]:bg-primary/10 data-[active=true]:border-primary data-[active=true]:text-primary data-[active=true]:shadow-lg data-[active=true]:transform data-[active=true]:scale-105
              px-4 py-2 rounded-full border border-fg-alt/20 transition-all duration-300 hover:border-primary/50 hover:bg-secondary/30 flex items-center gap-2 text-sm"
              data-category={category.id}
              data-active={index === 0 ? "true" : "false"}
            >
              {category.icon && <category.icon class="w-6 h-6" />}
              {category.label}
            </button>
          ))
        }
      </div>

      <!-- Skills Grid -->
      <div
        class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2"
        id="skills-grid"
      >
        {
          skills.map((skill) => (
            <SkillCard skill={skill} className="skill-item" />
          ))
        }
      </div>
    </div>

    <!-- Skill Proficiency Overview -->
    <div class="grid md:grid-cols-3 gap-6 bg-transparent">
      <!-- Expert Skills -->
      <div
        class="bg-bg-secondary rounded-xl p-6 border border-primary/70 md:border-primary/20 hover:border-primary/70 transition-all duration-300"
      >
        <div class="flex items-center mb-4">
          <div
            class="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center mr-3 text-primary"
          >
            ‚≠ê
          </div>
          <h3 class="text-lg font-bold">{t("skills.advanced_title")}</h3>
        </div>
        <div class="flex flex-wrap gap-2">
          {
            expertSkills.map((skill) => (
              <span class="px-3 py-1 bg-primary/20 text-fg rounded-full text-sm flex items-center gap-1">
                {skill.icon && <skill.icon class="w-3 h-3 mr-2" />}
                {skill.name}
              </span>
            ))
          }
        </div>
      </div>

      <!-- Advanced Skills -->
      <div
        class="bg-bg-secondary rounded-xl p-6 border border-secondary/70 md:border-secondary/20 hover:border-secondary/70 transition-all duration-300"
      >
        <div class="flex items-center mb-4">
          <div
            class="w-10 h-10 rounded-full bg-secondary/20 flex items-center justify-center mr-3 text-secondary"
          >
            üí™
          </div>
          <h3 class="text-lg font-bold">{t("skills.intermediate_title")}</h3>
        </div>
        <div class="flex flex-wrap gap-2">
          {
            advancedSkills.map((skill) => (
              <span class="px-3 py-1 bg-secondary/20 text-fg rounded-full text-sm flex items-center gap-1">
                {skill.icon && <skill.icon class="w-3 h-3 mr-2" />}
                {skill.name}
              </span>
            ))
          }
        </div>
      </div>

      <!-- Intermediate Skills -->
      <div
        class="bg-bg-secondary rounded-xl p-6 border border-tertiary/70 md:border-tertiary/20 hover:border-tertiary/70 transition-all duration-300"
      >
        <div class="flex items-center mb-4">
          <div
            class="w-10 h-10 rounded-full bg-tertiary/20 flex items-center justify-center mr-3 text-tertiary"
          >
            üìö
          </div>
          <h3 class="text-lg font-bold">{t("skills.basic_title")}</h3>
        </div>
        <div class="flex flex-wrap gap-2">
          {
            intermediateSkills.map((skill) => (
              <span class="px-3 py-1 bg-tertiary/20 text-fg rounded-full text-sm flex items-center gap-1">
                {skill.icon && <skill.icon class="w-3 h-3 mr-2" />}
                {skill.name}
              </span>
            ))
          }
        </div>
      </div>
    </div>
  </div>

  <script>
    // Add interactive filtering
    document.addEventListener("DOMContentLoaded", () => {
      const tabs = document.querySelectorAll(".skill-tab");
      const skillItems = document.querySelectorAll(".skill-item");

      tabs.forEach((tab) => {
        tab.addEventListener("click", () => {
          // Update active tab
          tabs.forEach((t) => t.setAttribute("data-active", "false"));
          tab.setAttribute("data-active", "true");

          const category = tab.getAttribute("data-category");

          // Reset animations by removing and re-adding the animation class
          skillItems.forEach((i) => {
            const item = i as HTMLElement;
            item.classList.remove("animated");

            // Force a reflow to restart animations
            void item.offsetWidth;

            // Filter skills
            if (
              category === "all" ||
              item.getAttribute("data-category") === category
            ) {
              item.classList.remove("hidden");

              // Small timeout to ensure DOM updates before adding animation class
              setTimeout(() => {
                item.classList.add("animated");
              }, 10);
            } else {
              item.classList.add("hidden");
            }
          });

          // Reapply staggered delays to visible items
          const visibleItems = document.querySelectorAll(
            ".skill-item:not(.hidden)",
          );
          visibleItems.forEach((i, index) => {
            const item = i as HTMLElement;

            item.style.animationDelay = `${0.1 * index}s`;
          });
        });
      });

      // Initialize with all items animated
      skillItems.forEach((i, index) => {
        const item = i as HTMLElement;
        item.style.animationDelay = `${0.2 * index}s`;
        item.classList.add("animated");
      });
    });
  </script>
</SectionContainer>
