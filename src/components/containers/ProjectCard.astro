---
import { Image } from "astro:assets";
import type { Project } from "../sections/Projects.astro";

interface Props {
  buttonCode: string;
  buttonDemo: string;
  project: Project;
}

const { project, buttonCode, buttonDemo } = Astro.props as Props;
---

<div
  class="project-card relative bg-bg-secondary rounded-xl overflow-hidden shadow-lg md:hover:shadow-xl md:hover:border-primary/70 md:hover:scale-107 transition-transform ease-in-out duration-750 border border-fg-alt group"
>
  <div class="absolute top-3 right-3 z-10">
    <span
      class={`px-3 py-1 rounded-full text-sm font-medium ${
        project.status === 'completed'
          // ? 'bg-green-500/20 text-green-500 hover:bg-green-500/50'
          ? 'hidden'
          : 'bg-accent-secondary/60 text-white/90'
      }`}
    >
      {project.status === 'completed' ? 'Completed' : 'Ongoing'}
    </span>
  </div>

  <div class="relative h-48 overflow-hidden">
    <Image
      src={project.image || "/default-web3-image.jpg"}
      alt={`Screenshot of ${project.title}`}
      width={500}
      height={300}
      class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
    />
    <div
      class="scroll-element absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 md:group-hover:opacity-100 transition-opacity flex items-end p-4"
    >
      <div class="flex gap-2">
        {
          project.demoUrl && (
            <a
              href={project.demoUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="px-3 py-1 bg-accent text-gray-200 rounded-full text-sm font-medium hover:bg-accent/50 transition-colors hover:text-white cursor-pointer"
            >
              {buttonDemo}
            </a>
          )
        }
        <a
          href={project.codeUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="px-3 py-1 bg-primary text-gray-300 rounded-full text-sm font-medium hover:bg-primary/50 transition-colors hover:text-white cursor-pointer"
        >
          {buttonCode}
        </a>
      </div>
    </div>
  </div>

  <div class="p-6">
    <h3 class="text-xl font-bold mb-2">{project.title}</h3>
    <p class="text-fg mb-4">{project.description}</p>

    <div class="flex flex-wrap gap-2 mb-4">
      {
        project.tags.map((tag: string) => (
          <span class="px-2 py-1 bg-accent/20 text-fg rounded-full text-xs hover:bg-accent/70">
            {tag}
          </span>
        ))
      }
    </div>
  </div>
</div>

<script>
  import { isTouchDevice } from "@/utils/deviceDetection.js";
  const isTouch = isTouchDevice();
  function isElementInCenter(el: Element) {
    const rect = el.getBoundingClientRect();
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight;
    const elementCenter = rect.top + rect.height / 2;
    const viewportCenter = windowHeight / 2;
    return Math.abs(elementCenter - viewportCenter) < 200; // 200px tolerance
  }

  function handleScroll() {
    const projectCards = document.querySelectorAll(".project-card");

    if (!projectCards.length) return;

    projectCards.forEach((card) => {
      const styledElement = card.querySelector(".scroll-element");

      if (isElementInCenter(card)) {
        card.classList.add("scale-105", "shadow-xl", "border-primary/70");
        if (styledElement) styledElement.classList.add("opacity-100");
      } else {
        card.classList.remove("scale-105", "shadow-xl", "border-primary/70");
        if (styledElement) styledElement.classList.remove("opacity-100");
      }
    });
  }

  const windowWidth = window.innerWidth || document.documentElement.clientWidth;
  const isMobile = windowWidth < 768;

  document.addEventListener("DOMContentLoaded", () => {
    if (isTouch || isMobile) {
      // bubble info appears when scrollin
      window.addEventListener("scroll", handleScroll);
    }
  });
</script>
