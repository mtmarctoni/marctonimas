---
import { Image } from "astro:assets";
import { useTranslations, getLangFromUrl } from "@/i18n/utils";

const url = new URL(Astro.url);
const lang = getLangFromUrl(url);
const t = useTranslations(lang);

interface Props {
  project: {
    image: string;
    title: string;
    demoUrl: string;
    codeUrl: string;
    description: string;
    tags: string[];
  };
}

const { project } = Astro.props as Props;
---

<div
  class="project-card bg-bg-secondary rounded-xl overflow-hidden shadow-lg md:hover:shadow-xl md:hover:border-primary/70 md:hover:scale-107 transition-transform ease-in-out duration-750 border border-fg-alt group"
>
  <div class="relative h-48 overflow-hidden">
    <Image
      src={project.image || "/default-web3-image.jpg"}
      alt={project.title}
      width={500}
      height={300}
      class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
    />
    <div
      class="scroll-element absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 md:group-hover:opacity-100 transition-opacity flex items-end p-4"
    >
      <div class="flex gap-2">
        <a
          href={project.demoUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="px-3 py-1 bg-accent text-gray-200 rounded-full text-sm font-medium hover:bg-accent/50 transition-colors hover:text-white"
        >
          {t("projects.live_demo")}
        </a>
        <a
          href={project.codeUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="px-3 py-1 bg-primary text-gray-300 rounded-full text-sm font-medium hover:bg-primary/50 transition-colors hover:text-white"
        >
          {t("projects.view_code")}
        </a>
      </div>
    </div>
  </div>

  <div class="p-6">
    <h3 class="text-xl font-bold mb-2">{project.title}</h3>
    <p class="text-fg mb-4">{project.description}</p>

    <div class="flex flex-wrap gap-2 mb-4">
      {
        project.tags.map((tag) => (
          <span class="px-2 py-1 bg-bg-alt text-fg rounded-md text-xs">
            {tag}
          </span>
        ))
      }
    </div>
  </div>
</div>

<script>
  function isElementInCenter(el: Element) {
    const rect = el.getBoundingClientRect();
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight;
    const elementCenter = rect.top + rect.height / 2;
    const viewportCenter = windowHeight / 2;
    return Math.abs(elementCenter - viewportCenter) < 200; // 200px tolerance
  }

  function handleScroll() {
    const projectCards = document.querySelectorAll(".project-card");

    if (!projectCards.length) return;

    projectCards.forEach((card) => {
      const styledElement = card.querySelector(".scroll-element");

      if (isElementInCenter(card)) {
        card.classList.add("scale-105", "shadow-xl", "border-primary/70");
        if (styledElement) styledElement.classList.add("opacity-100");
      } else {
        card.classList.remove("scale-105", "shadow-xl", "border-primary/70");
        if (styledElement) styledElement.classList.remove("opacity-100");
      }
    });
  }

  const windowWidth = window.innerWidth || document.documentElement.clientWidth;
  const isMobile = windowWidth < 768;

  document.addEventListener("DOMContentLoaded", () => {
    if (isMobile) {
      // bubble info appears when scrollin
      window.addEventListener("scroll", handleScroll);
    }
  });
</script>
